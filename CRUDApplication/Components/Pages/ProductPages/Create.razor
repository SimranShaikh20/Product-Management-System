@page "/products/create"
@using CRUDApplication.Models
@inject IDbContextFactory<CRUDApplication.Data.CRUDApplicationContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create Product</h1>

<EditForm Model="Product" OnValidSubmit="AddProduct" FormName="productForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <div class="mb-3">
        <label for="name" class="form-label">Name:</label>
        <InputText id="name" @bind-Value="Product.Name" class="form-control" />
        <ValidationMessage For="() => Product.Name" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="price" class="form-label">Price:</label>
        <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
        <ValidationMessage For="() => Product.Price" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="qty" class="form-label">Qty:</label>
        <InputNumber id="qty" @bind-Value="Product.Qty" class="form-control" />
        <ValidationMessage For="() => Product.Qty" class="text-danger" />
    </div>

    <div class="mb-3">
        <div class="custom-file-input">
        <label for="image" class="form-label">Image:</label>
        <InputFile id="image" OnChange="HandleFileSelected" @bind-Values="Product.Image" 
        
        accept=".jpg,.jpeg,.png"class="form-control" />
        <ValidationMessage For="() => Product.Image" class="text-danger" />
    </div>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<div>
    <a href="/products" class="btn btn-outline-secondary">Back to List</a>
</div>

@code {
    private Product Product { get; set; } = new Product();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        Product.Image = buffer;  // Store the image as byte array
    }

    private async Task AddProduct()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Product.Add(Product);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding product: {ex.Message}");
        }
    }
}
