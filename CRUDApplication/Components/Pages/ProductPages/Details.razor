@page "/products/details"
@using Microsoft.EntityFrameworkCore
@using CRUDApplication.Models
@inject IDbContextFactory<CRUDApplication.Data.CRUDApplicationContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Product Details</PageTitle>

<h1>Product Details</h1>

<div class="row">
    @if (products is null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!products.Any())
    {
        <p>No products found.</p>
    }
    else
    {
        @foreach (var product in products)
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">Price: @product.Price</h6>
                        <p class="card-text">Quantity: @product.Qty</p>
                        <a href="@($"/products/edit?id={product.id}")" class="btn btn-warning">Edit</a>
                    </div>
                </div>
            </div>
        }
    }
</div>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<div>
    <a href="@($"/products")" class="btn btn-outline-secondary">Back to List</a>
</div>

@code {
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        products = await context.Product.ToListAsync();

        if (products is null || !products.Any())
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
